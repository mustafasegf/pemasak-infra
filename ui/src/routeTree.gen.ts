/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const RegisterLazyImport = createFileRoute('/register')()
const LoginLazyImport = createFileRoute('/login')()
const CreateProjectLazyImport = createFileRoute('/create-project')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()
const ProjectOwnerProjectLazyImport = createFileRoute(
  '/project/$owner/$project',
)()
const ProjectOwnerProjectIndexLazyImport = createFileRoute(
  '/project/$owner/$project/',
)()
const ProjectOwnerProjectTerminalLazyImport = createFileRoute(
  '/project/$owner/$project/terminal',
)()
const ProjectOwnerProjectSettingsLazyImport = createFileRoute(
  '/project/$owner/$project/settings',
)()
const ProjectOwnerProjectLogsLazyImport = createFileRoute(
  '/project/$owner/$project/logs',
)()
const ProjectOwnerProjectEnvLazyImport = createFileRoute(
  '/project/$owner/$project/env',
)()
const ProjectOwnerProjectBuildBuildIdLazyImport = createFileRoute(
  '/project/$owner/$project/build/$buildId',
)()

// Create/Update Routes

const RegisterLazyRoute = RegisterLazyImport.update({
  path: '/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/register.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const CreateProjectLazyRoute = CreateProjectLazyImport.update({
  path: '/create-project',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/create-project.lazy').then((d) => d.Route),
)

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ProjectOwnerProjectLazyRoute = ProjectOwnerProjectLazyImport.update({
  path: '/project/$owner/$project',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/project/$owner/$project.lazy').then((d) => d.Route),
)

const ProjectOwnerProjectIndexLazyRoute =
  ProjectOwnerProjectIndexLazyImport.update({
    path: '/',
    getParentRoute: () => ProjectOwnerProjectLazyRoute,
  } as any).lazy(() =>
    import('./routes/project/$owner/$project/index.lazy').then((d) => d.Route),
  )

const ProjectOwnerProjectTerminalLazyRoute =
  ProjectOwnerProjectTerminalLazyImport.update({
    path: '/terminal',
    getParentRoute: () => ProjectOwnerProjectLazyRoute,
  } as any).lazy(() =>
    import('./routes/project/$owner/$project/terminal.lazy').then(
      (d) => d.Route,
    ),
  )

const ProjectOwnerProjectSettingsLazyRoute =
  ProjectOwnerProjectSettingsLazyImport.update({
    path: '/settings',
    getParentRoute: () => ProjectOwnerProjectLazyRoute,
  } as any).lazy(() =>
    import('./routes/project/$owner/$project/settings.lazy').then(
      (d) => d.Route,
    ),
  )

const ProjectOwnerProjectLogsLazyRoute =
  ProjectOwnerProjectLogsLazyImport.update({
    path: '/logs',
    getParentRoute: () => ProjectOwnerProjectLazyRoute,
  } as any).lazy(() =>
    import('./routes/project/$owner/$project/logs.lazy').then((d) => d.Route),
  )

const ProjectOwnerProjectEnvLazyRoute = ProjectOwnerProjectEnvLazyImport.update(
  {
    path: '/env',
    getParentRoute: () => ProjectOwnerProjectLazyRoute,
  } as any,
).lazy(() =>
  import('./routes/project/$owner/$project/env.lazy').then((d) => d.Route),
)

const ProjectOwnerProjectBuildBuildIdLazyRoute =
  ProjectOwnerProjectBuildBuildIdLazyImport.update({
    path: '/build/$buildId',
    getParentRoute: () => ProjectOwnerProjectLazyRoute,
  } as any).lazy(() =>
    import('./routes/project/$owner/$project/build.$buildId.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/create-project': {
      preLoaderRoute: typeof CreateProjectLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      preLoaderRoute: typeof RegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/project/$owner/$project': {
      preLoaderRoute: typeof ProjectOwnerProjectLazyImport
      parentRoute: typeof rootRoute
    }
    '/project/$owner/$project/env': {
      preLoaderRoute: typeof ProjectOwnerProjectEnvLazyImport
      parentRoute: typeof ProjectOwnerProjectLazyImport
    }
    '/project/$owner/$project/logs': {
      preLoaderRoute: typeof ProjectOwnerProjectLogsLazyImport
      parentRoute: typeof ProjectOwnerProjectLazyImport
    }
    '/project/$owner/$project/settings': {
      preLoaderRoute: typeof ProjectOwnerProjectSettingsLazyImport
      parentRoute: typeof ProjectOwnerProjectLazyImport
    }
    '/project/$owner/$project/terminal': {
      preLoaderRoute: typeof ProjectOwnerProjectTerminalLazyImport
      parentRoute: typeof ProjectOwnerProjectLazyImport
    }
    '/project/$owner/$project/': {
      preLoaderRoute: typeof ProjectOwnerProjectIndexLazyImport
      parentRoute: typeof ProjectOwnerProjectLazyImport
    }
    '/project/$owner/$project/build/$buildId': {
      preLoaderRoute: typeof ProjectOwnerProjectBuildBuildIdLazyImport
      parentRoute: typeof ProjectOwnerProjectLazyImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexLazyRoute,
  AboutLazyRoute,
  CreateProjectLazyRoute,
  LoginLazyRoute,
  RegisterLazyRoute,
  ProjectOwnerProjectLazyRoute.addChildren([
    ProjectOwnerProjectEnvLazyRoute,
    ProjectOwnerProjectLogsLazyRoute,
    ProjectOwnerProjectSettingsLazyRoute,
    ProjectOwnerProjectTerminalLazyRoute,
    ProjectOwnerProjectIndexLazyRoute,
    ProjectOwnerProjectBuildBuildIdLazyRoute,
  ]),
])

/* prettier-ignore-end */
