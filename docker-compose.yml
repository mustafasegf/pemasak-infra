version: "3.8"
services:
  db:
    container_name: db-pemasak
    image: postgres:16.0-alpine3.18
    volumes:
      - db-data:/var/lib/postgresql/data
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGPORT: ${DB_PORT}

    # network_mode: "host"
    networks:
      - pemasak
    ports:
      - "${DB_PORT}:${DB_PORT}"
  
  server:
    container_name: server-pemasak
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${APPLICATION_PORT}:${APPLICATION_PORT}"
    environment:
    #   - "DATABASE_HOST=db"
    #   - "DATABASE_PORT=5432"
    #   - "APPLICATION_HOST=0.0.0.0"
      - "GIT_BASE=./git-repo"
    volumes:
      - ./configuration.yml:/app/configuration.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - ./git-repo:/app/git-repo
      - ./assets:/app/assets
    depends_on:
      - db
      - fluentd
    network_mode: "host"
    # networks:
    #   - pemasak
    logging:
      driver: fluentd
      options:
        fluentd-address: localhost:24224
        tag: docker.server-pemasak

  docker-host:
    image: qoomon/docker-host
    container_name: docker-host-pemasak
    # network_mode: "host"
    networks:
      - pemasak
    cap_add: [ 'NET_ADMIN', 'NET_RAW' ]
    mem_limit: 8M
    restart: always

  prometheus:
    image: prom/prometheus
    container_name: prometheus-pemasak
    restart: always
    # network_mode: "host"
    networks:
      - pemasak
    ports:
      - "9090:9090"
      
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=180d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
        # - '--web.config.file=/etc/prometheus/web.yml'
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prom_data:/prometheus

  grafana:
    image: grafana/grafana
    container_name: grafana-pemasak
    restart: always
    # network_mode: "host"
    networks:
      - pemasak
    ports:
      - "3000:3000"

    environment:
      # TODO: move this to env
      - GF_SECURITY_ADMIN_USER=chef
      - GF_SECURITY_ADMIN_PASSWORD=strong-powerful-password
        #- GF_SERVER_ROOT_URL=/grafana
        #- GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - ./config/grafana:/etc/grafana/provisioning/datasources
      - grafana-data:/var/lib/grafana

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter-pemasak
    restart: always
    # network_mode: "host"
    networks:
      - pemasak
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.systemd'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

  fluentd:
    image: grafana/fluent-plugin-loki:main
    container_name: fluentd-pemasak
    restart: always
    # network_mode: "host"
    networks:
      - pemasak
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    volumes:
      - ./config/fluentd:/fluentd/etc/
      - /var/run/docker.sock:/var/run/docker.sock
      # Needed for journald log ingestion:
      - /etc/machine-id:/etc/machine-id
      - /dev/log:/dev/log
      - /var/run/systemd/journal/:/var/run/systemd/journal/
    environment:
      LOKI_URL: http://loki:3100

  loki:
    image: grafana/loki:latest
    container_name: loki-pemasak
    restart: always
    # network_mode: "host"
    networks:
      - pemasak
    ports:
      - "3100:3100"
    volumes:
      # - ./config/loki:/etc/loki
      - loki-data:/loki

volumes:
  db-data:
    driver: local
  prom_data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local

networks:
  pemasak:
    driver: bridge
